.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "AppConfig::Getopt 3"
.TH AppConfig::Getopt 3 "2015-03-01" "perl v5.32.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
AppConfig::Getopt \- Perl5 module for processing command line arguments via delegation to Getopt::Long.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use AppConfig::Getopt;
\&
\&    my $state  = AppConfig::State\->new(\e%cfg);
\&    my $getopt = AppConfig::Getopt\->new($state);
\&
\&    $getopt\->parse(\e@args);            # read args
.Ve
.SH "OVERVIEW"
.IX Header "OVERVIEW"
AppConfig::Getopt is a Perl5 module which delegates to Johan Vroman's
Getopt::Long module to parse command line arguments and update values 
in an AppConfig::State object accordingly.
.PP
AppConfig::Getopt is distributed as part of the AppConfig bundle.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "\s-1USING THE\s0 AppConfig::Getopt \s-1MODULE\s0"
.IX Subsection "USING THE AppConfig::Getopt MODULE"
To import and use the AppConfig::Getopt module the following line should appear
in your Perl script:
.PP
.Vb 1
\&    use AppConfig::Getopt;
.Ve
.PP
AppConfig::Getopt is used automatically if you use the AppConfig module 
and create an AppConfig::Getopt object through the \fBgetopt()\fR method.
.PP
AppConfig::Getopt is implemented using object-oriented methods.  A new 
AppConfig::Getopt object is created and initialised using the \fBnew()\fR method.
This returns a reference to a new AppConfig::Getopt object.  A reference to
an AppConfig::State object should be passed in as the first parameter:
.PP
.Vb 2
\&    my $state  = AppConfig::State\->new();
\&    my $getopt = AppConfig::Getopt\->new($state);
.Ve
.PP
This will create and return a reference to a new AppConfig::Getopt object.
.SS "\s-1PARSING COMMAND LINE ARGUMENTS\s0"
.IX Subsection "PARSING COMMAND LINE ARGUMENTS"
The \f(CW\*(C`parse()\*(C'\fR method is used to read a list of command line arguments and 
update the state accordingly.
.PP
The first (non-list reference) parameters may contain a number of 
configuration strings to pass to Getopt::Long::Configure.  A reference 
to a list of arguments may additionally be passed or \f(CW@ARGV\fR is used by 
default.
.PP
.Vb 4
\&    $getopt\->parse();                       # uses @ARGV
\&    $getopt\->parse(\e@myargs);
\&    $getopt\->parse(qw(auto_abbrev debug));  # uses @ARGV
\&    $getopt\->parse(qw(debug), \e@myargs);
.Ve
.PP
See Getopt::Long for details of the configuartion options available.
.PP
A Getopt::Long specification string is constructed for each variable 
defined in the AppConfig::State.  This consists of the name, any aliases
and the \s-1ARGS\s0 value for the variable.
.PP
These specification string are then passed to Getopt::Long, the arguments
are parsed and the values in the AppConfig::State updated.
.PP
See AppConfig for information about using the AppConfig::Getopt
module via the \fBgetopt()\fR method.
.SH "AUTHOR"
.IX Header "AUTHOR"
Andy Wardley, <abw@wardley.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 1997\-2007 Andy Wardley.  All Rights Reserved.
.PP
Copyright (C) 1997,1998 Canon Research Centre Europe Ltd.
.PP
This module is free software; you can redistribute it and/or modify it 
under the same terms as Perl itself.
.SH "ACKNOWLEDGMENTS"
.IX Header "ACKNOWLEDGMENTS"
Many thanks are due to Johan Vromans for the Getopt::Long module.  He was 
kind enough to offer assistance and access to early releases of his code to 
enable this module to be written.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
AppConfig, AppConfig::State, AppConfig::Args, Getopt::Long
